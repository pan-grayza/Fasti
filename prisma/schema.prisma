// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  calendars     Calendar[]
  journals      Journal[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Calendar {
  id           String      @id @default(cuid())
  calendarName String
  dayEvents    dayEvent[]
  timeEvents   timeEvent[]
  hostId       String

  host User @relation(fields: [hostId], references: [id], onDelete: Cascade)
}

model timeEvent {
  id         String   @id @default(cuid())
  name       String
  startTime  DateTime
  durationM  Int
  calendar   Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  calendarId String
}

model dayEvent {
  id         String   @id @default(cuid())
  name       String
  date       DateTime
  calendar   Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  calendarId String
}

model Journal {
  id           String     @id @default(cuid())
  calendarName String
  dayTopics    dayTopic[]
  hostId       String

  host User @relation(fields: [hostId], references: [id], onDelete: Cascade)
}

model dayTopic {
  id        String    @id @default(cuid())
  date      DateTime
  dayNotes  dayNote[]
  journalId String

  journal Journal @relation(fields: [journalId], references: [id], onDelete: Cascade)
}

model dayNote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  name      String
  content   String

  dayTopicId String
  dayTopic   dayTopic @relation(fields: [dayTopicId], references: [id], onDelete: Cascade)
}
